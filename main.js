(()=>{"use strict";var __webpack_modules__={444:()=>{eval("\n;// CONCATENATED MODULE: ./src/components/utils.js\nfunction openedPopup(element) {\n  element.classList.add('popup_opened');\n  element.addEventListener('click', closeOverlay);\n  document.addEventListener('keydown', closeEscape);\n}\nfunction closePopup(element) {\n  element.classList.remove('popup_opened');\n  element.removeEventListener('click', closeOverlay);\n  document.removeEventListener('keydown', closeEscape);\n}\nfunction closeEscape(evt) {\n  if (evt.key === 'Escape') {\n    var escClose = document.querySelector('.popup_opened');\n    closePopup(escClose);\n  }\n}\nfunction closeOverlay(e) {\n  if (e.target === e.currentTarget) {\n    closePopup(e.currentTarget);\n  }\n}\nfunction renderButton(_ref) {\n  var button = _ref.button,\n    text = _ref.text,\n    disabled = _ref.disabled;\n  if (!disabled) {\n    button.disabled = false;\n  } else {\n    button.disabled = 'disabled';\n  }\n  button.textContent = text;\n}\n;// CONCATENATED MODULE: ./src/components/api.js\nvar config = {\n  url: 'https://mesto.nomoreparties.co/v1/wbf-cohort-5',\n  headers: {\n    \"Content-Type\": 'application/json',\n    authorization: \"55bce47d-4934-432d-b120-81a3b18983fa\"\n  }\n};\nfunction onResponse(res) {\n  return res.ok ? res.json() : res.json().then(function (data) {\n    return Promise.reject(data);\n  });\n}\n\n// Загрузка информации о пользователе\nfunction getProfileInfo() {\n  return fetch(\"\".concat(config.url, \"/users/me\"), {\n    method: 'GET',\n    headers: config.headers\n  }).then(onResponse);\n}\n\n// Загрузка карточек с сервера\nfunction getAllCards() {\n  return fetch(\"\".concat(config.url, \"/cards\"), {\n    method: 'GET',\n    headers: config.headers\n  }).then(onResponse);\n}\n\n// Редактирование профиля\nfunction editProfile(name, profession) {\n  return fetch(\"\".concat(config.url, \"/users/me\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({\n      \"name\": name,\n      \"about\": profession\n    })\n  }).then(onResponse);\n}\n\n// Добавление новой карточки\nfunction postCard(cardName, cardLink) {\n  return fetch(\"\".concat(config.url, \"/cards\"), {\n    method: 'POST',\n    headers: config.headers,\n    body: JSON.stringify({\n      \"name\": cardName,\n      \"link\": cardLink\n    })\n  }).then(onResponse);\n}\n\n//удаление карточки\nfunction deleteCard(cardID) {\n  return fetch(\"\".concat(config.url, \"/cards/\").concat(cardID), {\n    method: 'DELETE',\n    headers: config.headers,\n    body: JSON.stringify({\n      \"_id\": cardID\n    })\n  }).then(onResponse);\n}\n\n//постановка и удаление лайка карточки\nfunction updateLike(cardID, isLiked) {\n  return fetch(\"\".concat(config.url, \"/cards/likes/\").concat(cardID), {\n    method: isLiked ? 'DELETE' : 'PUT',\n    headers: config.headers\n  }).then(onResponse);\n}\n\n//редактирование аватара пользователя\nfunction editAvatar(avatarLink) {\n  return fetch(\"\".concat(config.url, \"/users/me/avatar\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({\n      \"avatar\": avatarLink\n    })\n  }).then(onResponse);\n}\n;// CONCATENATED MODULE: ./src/components/card.js\n\n\nvar addPopup = document.querySelector('#popup-add');\nvar elementTemplate = document.getElementById('element-template').content;\nfunction isLiked(card, userID) {\n  return card.likes.some(function (object) {\n    return object._id === userID;\n  });\n}\nfunction updateLikeView(card, userID, buttonLike, scoreLike) {\n  if (isLiked(card, userID)) {\n    buttonLike.classList.add('element__button-like_active');\n  } else {\n    buttonLike.classList.remove('element__button-like_active');\n  }\n  scoreLike.textContent = card.likes.length;\n}\nfunction getCardElement(card, userID) {\n  console.log(card.likes);\n  var cardID = card._id;\n  var element = elementTemplate.querySelector('.element').cloneNode(true);\n  var elementPhoto = element.querySelector('.element__photo');\n  var buttonDelete = element.querySelector('.element__button-delete');\n  var buttonLike = element.querySelector('.element__button-like');\n  var scoreLike = element.querySelector('.element__like-score');\n  element.querySelector('.element__title').textContent = card.name;\n  elementPhoto.src = card.link;\n  elementPhoto.alt = card.name;\n  updateLikeView(card, userID, buttonLike, scoreLike);\n\n  //  лайк карточки\n  buttonLike.addEventListener('click', function () {\n    updateLike(cardID, isLiked(card, userID)).then(function (data) {\n      card.likes = data.likes;\n      updateLikeView(card, userID, buttonLike, scoreLike);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  });\n\n  //  удаление карточки\n  if (card.owner._id === userID) {\n    buttonDelete.addEventListener('click', function () {\n      deleteCard(card._id).then(function () {\n        element.remove();\n        console.log(\"\\u041A\\u0430\\u0440\\u0442\\u043E\\u0447\\u043A\\u0430 \\u0441 id \".concat(card._id, \" \\u0443\\u0434\\u0430\\u043B\\u0435\\u043D\\u0430\"));\n      }).catch(function (error) {\n        console.log(error);\n      });\n    });\n  } else {\n    buttonDelete.remove();\n  }\n  elementPhoto.addEventListener('click', function () {\n    return clickImage(card);\n  });\n  return element;\n}\nvar bigPopup = document.querySelector('#popup-big');\nvar bigPopupTitle = document.querySelector('.popup__title-big');\nvar bigPopupImg = document.querySelector('.popup__photo');\nfunction clickImage(data) {\n  bigPopupImg.src = data.link;\n  bigPopupImg.alt = data.name;\n  bigPopupTitle.textContent = data.name;\n  openedPopup(bigPopup);\n}\n;// CONCATENATED MODULE: ./src/components/modal.js\n\n\n\n// Обработка формы\nvar editPopup = document.querySelector('.popup-profile');\nvar profileName = document.querySelector('.profile__title');\nvar profileProfession = document.querySelector('.profile__subtitle');\nvar profileFormElement = document.querySelector('#profile-form');\nvar inputFullName = profileFormElement.querySelector('.popup__input_type_name');\nvar inputProfession = profileFormElement.querySelector('.popup__input_type_profession');\nvar postForm = document.querySelector('#post-form');\nvar avatarForm = document.querySelector('#avatar-form');\nvar avatarPopup = document.querySelector('#popup-avatar');\nvar saveButtonProfile = profileFormElement.querySelector('.popup__button-submit');\nvar saveButtonAddCard = postForm.querySelector('.popup__button-submit');\nvar saveButtonAvatar = avatarForm.querySelector('.popup__button-submit');\nvar modal_name = postForm.querySelector('.form__input_type_photo');\nvar modal_link = postForm.querySelector('.form__input_type_url');\nfunction handleFormSubmit(evt) {\n  evt.preventDefault();\n  renderButton({\n    button: saveButtonProfile,\n    text: 'Сохранение...',\n    disabled: true\n  });\n  editProfile(inputFullName.value, inputProfession.value).then(function () {\n    profileName.textContent = inputFullName.value;\n    profileProfession.textContent = inputProfession.value;\n  }).then(function () {\n    closePopup(editPopup);\n  }).catch(function () {\n    console.log(error);\n  }).finally(function () {\n    renderButton({\n      button: saveButtonProfile,\n      text: 'Сохранить',\n      disabled: false\n    });\n  });\n}\nvar modal_elements = document.querySelector('.elements');\n//  Добавление карточки\nfunction postFormSubmit(userID, event) {\n  event.preventDefault();\n  renderButton({\n    button: saveButtonAddCard,\n    text: 'Сохранение...',\n    disabled: true\n  });\n  postCard(modal_name.value, modal_link.value).then(function (card) {\n    modal_elements.prepend(getCardElement(card, userID));\n    event.target.reset();\n  }).then(function () {\n    closePopup(addPopup);\n  }).catch(function (error) {\n    console.log(error);\n  }).finally(function () {\n    renderButton({\n      button: saveButtonAddCard,\n      text: 'Сохранить',\n      disabled: false\n    });\n  });\n}\n// редактор аватара\nvar avatarProfile = document.querySelector('.profile__avatar');\nvar avatarLinkInput = avatarForm.querySelector('.popup__input_type_avatar');\nfunction editProfileAvatar(e) {\n  e.preventDefault();\n  renderButton({\n    button: saveButtonAvatar,\n    text: 'Сохранение...',\n    disabled: true\n  });\n  editAvatar(avatarLinkInput.value, e).then(function (data) {\n    avatarProfile.src = data.avatar;\n    e.target.reset();\n    console.log('ok');\n  }).then(function () {\n    closePopup(avatarPopup);\n  }).catch(function (error) {\n    console.log(error);\n  }).finally(function () {\n    renderButton({\n      button: saveButtonAvatar,\n      text: 'Сохранить',\n      disabled: false\n    });\n  });\n}\n;// CONCATENATED MODULE: ./src/components/validate.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction showError(inputElement, errorElement, object) {\n  inputElement.classList.add(object.inputErrorClass);\n  errorElement.textContent = inputElement.validationMessage;\n}\nfunction hideError(inputElement, errorElement, object) {\n  inputElement.classList.remove(object.inputErrorClass);\n  errorElement.textContent = \"\";\n}\nfunction toggleButton(buttonElement, isActive, object) {\n  if (isActive) {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove(object.inactiveButtonClass);\n  } else {\n    buttonElement.disabled = 'disabled';\n    buttonElement.classList.add(object.inactiveButtonClass);\n  }\n}\nfunction checkValidity(inputElement, formElement, object) {\n  var isInputValid = inputElement.validity.valid;\n  var errorElement = formElement.querySelector(\"#\".concat(inputElement.name, \"-error\"));\n  if (!isInputValid) {\n    showError(inputElement, errorElement, object);\n  } else {\n    hideError(inputElement, errorElement, object);\n  }\n}\nfunction setEventListener(formElement, object) {\n  var inputList = formElement.querySelectorAll(object.inputSelector);\n  var submitButtonElement = formElement.querySelector(object.submitButtonSelector);\n  toggleButton(submitButtonElement, formElement.checkValidity(), object);\n  formElement.addEventListener('reset', function () {\n    setTimeout(function () {\n      toggleButton(submitButtonElement, formElement.checkValidity(), object), 0;\n    });\n  });\n  _toConsumableArray(inputList).forEach(function (inputItem) {\n    inputItem.addEventListener('input', function () {\n      toggleButton(submitButtonElement, formElement.checkValidity(), object);\n      checkValidity(inputItem, formElement, object);\n    });\n  });\n}\nfunction enableValidation(object) {\n  var forms = document.querySelectorAll(object.formSelector);\n  _toConsumableArray(forms).forEach(function (formItem) {\n    setEventListener(formItem, object);\n  });\n}\nvar objectValidation = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button-submit',\n  inactiveButtonClass: 'popup__button-submit_invalid',\n  inputErrorClass: 'popup__input_invalid'\n};\nenableValidation(objectValidation);\n;// CONCATENATED MODULE: ./src/index.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || src_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction src_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return src_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_arrayLikeToArray(o, minLen); }\nfunction src_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\nvar userID = null;\nvar src_editAvatar = document.querySelector('.profile__button-avatar');\nvar profileAvatar = document.querySelector('.profile__avatar');\nvar src_elements = document.querySelector('.elements');\nvar avatarClose = avatarPopup.querySelector('.popup__button-close');\nvar editButton = document.querySelector('.profile__button-edit');\nvar closeButtons = document.querySelector('.popup__button-close');\nvar src_bigPopup = document.querySelector('#popup-big');\nvar closeBigButton = src_bigPopup.querySelector('.popup__button-close');\nvar addButton = document.querySelector('.profile__button-add');\nvar closeAddButton = addPopup.querySelector('.popup__button-close');\n\n// форма профиля\nprofileFormElement.addEventListener('submit', handleFormSubmit);\n// форма картинки\npostForm.addEventListener('submit', function (event) {\n  postFormSubmit(userID, event);\n});\n// форма аватара\navatarForm.addEventListener('submit', editProfileAvatar);\n\n// открытие профиля\neditButton.addEventListener('click', function () {\n  openedPopup(editPopup);\n  inputFullName.value = profileName.textContent;\n  inputProfession.value = profileProfession.textContent;\n});\n// открытие формы\naddButton.addEventListener('click', function () {\n  openedPopup(addPopup);\n});\n// Открытие аватара\nsrc_editAvatar.addEventListener('click', function () {\n  openedPopup(avatarPopup);\n});\n\n// закрытие профиля\ncloseButtons.addEventListener('click', function () {\n  closePopup(editPopup);\n});\n// закрытие аватара\navatarClose.addEventListener('click', function () {\n  closePopup(avatarPopup);\n});\n// закрытие добавления\ncloseAddButton.addEventListener('click', function () {\n  closePopup(addPopup);\n});\n// закрытие большой картинки\ncloseBigButton.addEventListener('click', function () {\n  closePopup(src_bigPopup);\n});\n// закрытие оверлея\nsrc_bigPopup.addEventListener('click', function () {\n  closePopup(src_bigPopup);\n});\nfunction renderCards(data) {\n  data.forEach(function (dataCard) {\n    var arrayCardImg = getCardElement(dataCard, userID);\n    src_elements.append(arrayCardImg);\n  });\n}\nPromise.all([getProfileInfo(), getAllCards()]).then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    userData = _ref2[0],\n    cardsData = _ref2[1];\n  userID = userData._id;\n  profileName.textContent = userData.name;\n  profileProfession.textContent = userData.about;\n  profileAvatar.src = userData.avatar;\n  renderCards(cardsData);\n}).catch(function (error) {\n  console.log(error);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///444\n")}},__webpack_exports__={};__webpack_modules__[444]()})();